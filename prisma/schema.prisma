generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL_DEV")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  accounts  Account[]
  sessions  Session[]

  hooks     Hook[]
  resources Resource[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Hook {
  id             String   @id @default(uuid())
  title          String
  description    String
  creator        String
  website        String
  github         String
  status         String   @default("draft")

  userId         String
  user           User     @relation(fields: [userId], references: [id])

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  categoryId     String
  category       Category @relation(fields: [categoryId], references: [id])

  networkId      String?
  network        Network?  @relation(fields: [networkId], references: [id])
  
  contractId     String?
  contract       Contract? @relation(fields: [contractId], references: [id])

  deploymentDateId String?
  deploymentDate DeploymentDate? @relation(fields: [deploymentDateId], references: [id])

  @@map(name: "hook")
}

model Network {
  id             String   @id @default(uuid())
  name           String
  imageUrl       String
  verified       Boolean  @default(false)

  hooks          Hook[]

  @@map(name: "network")
}

model Contract {
  id             String   @id @default(uuid())
  contractName    String
  compilerVersion String
  creator         String?
  transactionHash String?

  hooks           Hook[]

  @@map(name: "contract")
}

model DeploymentDate {
  id             String   @id @default(uuid())
  date      String
  dateTime  String
  hooks     Hook[]

  @@map(name: "deploymentDate")
}

model Category {
  id String @id @unique

  title       String
  description String
  category    String
  emoji       String
  count       Int     @default(0)
  tag         String?

  hooks Hook[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map(name: "category")
}

model Resource {
  id             String   @id @default(uuid())

  title String

  section String
  emoji   String

  resourceUrl String
  description String  @db.Text

  status String @default("pending")
  tag    String @default("community")

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map(name: "resource")
}
